import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os

# --- Step 3: Feature Engineering ---

preprocessed_data_path = 'data/data.csv'

try:
    df_encoded = pd.read_csv(preprocessed_data_path)
    print(f"Preprocessed dataset '{preprocessed_data_path}' loaded successfully for Feature Engineering.")
except FileNotFoundError:
    print(f"Error: '{preprocessed_data_path}' not found.")
    print("Please ensure your preprocessed file is generated by '01_data_preprocessing.py' and is in the 'data/' directory.")
    exit()

# Ensure Churn is numeric (0/1)
if df_encoded['Churn'].dtype == 'object':
    df_encoded['Churn'] = df_encoded['Churn'].map({'Yes': 1, 'No': 0})
    print("\n'Churn' column converted to numeric (0/1).")
else:
    print("\n'Churn' column is already numeric.")


print("\nInitial Head of the Preprocessed Dataset:")
print(df_encoded.head())
print("\nInitial Info of the Preprocessed Dataset:")
df_encoded.info()

# Create New Features

# MonthlyToTotalRatio
df_encoded['MonthlyToTotalRatio'] = df_encoded.apply(
    lambda row: row['MonthlyCharges'] / row['TotalCharges'] if row['TotalCharges'] != 0 else 0,
    axis=1
)
print("\n'MonthlyToTotalRatio' created. Head:")
print(df_encoded[['MonthlyCharges', 'TotalCharges', 'MonthlyToTotalRatio']].head())

# TenureGroup
bins = [0, 12, 24, 48, 60, np.inf]
labels = ['0-12', '13-24', '25-48', '49-60', '>60']
df_encoded['TenureGroup'] = pd.cut(df_encoded['tenure'], bins=bins, labels=labels, right=False)

print("\n'TenureGroup' created. Value Counts:")
print(df_encoded['TenureGroup'].value_counts())

df_encoded = pd.get_dummies(df_encoded, columns=['TenureGroup'], drop_first=True, dtype=int)
print("\n'TenureGroup' one-hot encoded. New columns:")
print([col for col in df_encoded.columns if 'TenureGroup' in col])

# HasMultipleServices
service_cols = [
    'MultipleLines_Yes', 'OnlineSecurity_Yes', 'OnlineBackup_Yes',
    'DeviceProtection_Yes', 'TechSupport_Yes', 'StreamingTV_Yes',
    'StreamingMovies_Yes'
]

existing_service_cols = [col for col in service_cols if col in df_encoded.columns]
print(f"\nUsing service columns for 'HasMultipleServices': {existing_service_cols}")

if existing_service_cols:
    df_encoded['HasMultipleServices'] = (df_encoded[existing_service_cols].sum(axis=1) > 0).astype(int)
    print("\n'HasMultipleServices' created. Value Counts:")
    print(df_encoded['HasMultipleServices'].value_counts())
else:
    print("\nSkipping 'HasMultipleServices' creation: Required service columns not found.")

# TotalServiceScore
value_added_services = [
    'OnlineSecurity_Yes', 'OnlineBackup_Yes', 'DeviceProtection_Yes',
    'TechSupport_Yes', 'StreamingTV_Yes', 'StreamingMovies_Yes',
    'MultipleLines_Yes'
]

existing_value_added_services = [col for col in value_added_services if col in df_encoded.columns]
print(f"\nUsing value-added service columns for 'TotalServiceScore': {existing_value_added_services}")

if existing_value_added_services:
    df_encoded['TotalServiceScore'] = df_encoded[existing_value_added_services].sum(axis=1)
    print("\n'TotalServiceScore' created. Head and Value Counts:")
    print(df_encoded['TotalServiceScore'].head())
    print(df_encoded['TotalServiceScore'].value_counts())
else:
    print("\nSkipping 'TotalServiceScore' creation: Required service columns not found.")


# Review New Features
print("\nDataFrame Info after Feature Engineering:")
df_encoded.info()
print("\nNew Features Correlation with Churn:")
new_features = ['MonthlyToTotalRatio', 'HasMultipleServices', 'TotalServiceScore']
new_features.extend([col for col in df_encoded.columns if 'TenureGroup_' in col])

for feature in new_features:
    if feature in df_encoded.columns and 'Churn' in df_encoded.columns:
        print(f"Correlation of {feature} with Churn: {df_encoded[feature].corr(df_encoded['Churn']):.4f}")
    else:
        print(f"Skipping correlation for {feature}: not found or 'Churn' not found.")

for feature in ['MonthlyToTotalRatio', 'HasMultipleServices', 'TotalServiceScore']:
    if feature in df_encoded.columns:
        plt.figure(figsize=(8, 6))
        if df_encoded[feature].nunique() <= 5:
            sns.countplot(x=feature, hue='Churn', data=df_encoded, palette='plasma')
        else:
            sns.violinplot(x='Churn', y=feature, data=df_encoded, palette='pastel')
        plt.title(f'{feature} vs. Churn')
        plt.show()
    else:
        print(f"Skipping visualization for {feature}: not found.")

for col in df_encoded.columns:
    if 'TenureGroup_' in col:
        plt.figure(figsize=(6, 4))
        sns.countplot(x=col, hue='Churn', data=df_encoded, palette='plasma')
        plt.title(f'{col} vs. Churn')
        plt.show()

# --- Save the DataFrame with Engineered Features ---
print("\n--- Saving DataFrame with Engineered Features ---")
output_path_csv = 'data/final_features.csv'
df_encoded.to_csv(output_path_csv, index=False)
print(f"DataFrame with Engineered Features saved to: {output_path_csv}")