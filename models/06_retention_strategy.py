import pandas as pd
import numpy as np
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import os

# --- Step 7: Recommendation System (Retention Strategy) ---

print("\n--- Step 7: Developing Retention Strategies ---")

# Load the final features dataset
final_features_data_path = 'data/final_features.csv'

try:
    df_final = pd.read_csv(final_features_data_path)
    print(f"Final features dataset '{final_features_data_path}' loaded for Retention Strategy development.")
except FileNotFoundError:
    print(f"Error: '{final_features_data_path}' not found.")
    print("Please ensure the file is generated by '02_feature_engineering.py' and is in the 'data/' directory.")
    exit()

# Re-split data to get X and y consistent with model training
X = df_final.drop('Churn', axis=1)
y = df_final['Churn']

# We need the full X to identify customers, so we'll use X (the entire feature set)
# and for prediction, we need to scale it.

# Load the saved scaler
try:
    scaler = joblib.load('models/scaler.pkl')
    print("Scaler loaded.")
except FileNotFoundError:
    print("Error: 'scaler.pkl' not found in 'models/' directory.")
    print("Please ensure '03_model_building.py' was run to save the scaler.")
    exit()

# Load the best performing model (e.g., Random Forest, as it was often a good performer)
# You can choose based on your evaluation results from 04_model_evaluation.py
try:
    best_model = joblib.load('models/random_forest_model.pkl')
    model_name = "Random Forest"
    print(f"Best model ({model_name}) loaded for identifying at-risk customers.")
except FileNotFoundError:
    print("Error: Random Forest model not found in 'models/' directory.")
    print("Please ensure '03_model_building.py' was run to save the model.")
    # Fallback or alternative if you prefer Gradient Boosting etc.
    try:
        best_model = joblib.load('models/gradient_boosting_model.pkl')
        model_name = "Gradient Boosting"
        print(f"Best model ({model_name}) loaded for identifying at-risk customers.")
    except FileNotFoundError:
        print("Error: No suitable model found. Cannot identify at-risk customers.")
        exit()


# 1. Identify At-Risk Customers
# Scale the entire feature set X before prediction
X_scaled = scaler.transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns, index=X.index)

# Get churn probabilities for all customers
churn_probabilities = best_model.predict_proba(X_scaled_df)[:, 1]
df_final['Churn_Probability'] = churn_probabilities

# Add original customerID back for identification if available (assuming you skipped dropping in '01_data_preprocessing' for this specific step or re-merge)
# For this script, we'll assume df_final doesn't have customerID and focus on indices as examples.
# If you want customerID, you'd need to load the original df and merge.

# Define a threshold for "at-risk" (e.g., probability > 0.5)
# You can adjust this threshold based on desired sensitivity/specificity from your evaluation.
churn_threshold = 0.5
df_at_risk = df_final[df_final['Churn_Probability'] > churn_threshold].copy()
df_at_risk['Predicted_Churn'] = (df_at_risk['Churn_Probability'] > churn_threshold).astype(int)

print(f"\nNumber of Customers predicted as 'At-Risk' (Churn Probability > {churn_threshold}): {len(df_at_risk)}")
print("Sample of At-Risk Customers (first 5 rows):")
print(df_at_risk[['Churn_Probability', 'tenure', 'MonthlyCharges', 'Contract_Two year', 'InternetService_Fiber optic', 'TotalServiceScore', 'Churn']].head())

# 2. Segment At-Risk Customers for Targeted Strategies

# Re-incorporate original categorical features for easier segmentation if needed
# (This assumes df_final still contains the original non-encoded categories.
# If not, you'd need to load the raw data or map back).
# For this example, we will use the one-hot encoded columns directly.

print("\n--- Segmenting At-Risk Customers based on Key Churn Drivers ---")

# Based on insights from 05_interpretation_insights.py (e.g., Contract, InternetService, TenureGroup)

# Segment 1: High-Risk, Short-Term Contract, Fiber Optic
segment1_condition = (df_at_risk['Contract_Two year'] == 0) & \
                     (df_at_risk['InternetService_Fiber optic'] == 1) & \
                     (df_at_risk['tenure'] < 12) # Example for short-term
segment_1 = df_at_risk[segment1_condition]
print(f"\nSegment 1: Short-Term Contract, Fiber Optic, At-Risk Customers ({len(segment_1)} customers)")
if not segment_1.empty:
    print(segment_1[['Churn_Probability', 'tenure', 'MonthlyCharges', 'Contract_Two year', 'InternetService_Fiber optic']].head())
    print("Recommended Strategy for Segment 1: Proactive outreach with special introductory offers for longer contracts, emphasize stable connection, dedicated tech support.")

# Segment 2: Long-Term Customers, At-Risk, Potentially High Monthly Charges
segment2_condition = (df_at_risk['tenure'] > 24) & \
                     (df_at_risk['Churn_Probability'] > 0.6) & \
                     (df_at_risk['MonthlyCharges'] > df_at_risk['MonthlyCharges'].median())
segment_2 = df_at_risk[segment2_condition]
print(f"\nSegment 2: Long-Term, High-Value, High-Risk Customers ({len(segment_2)} customers)")
if not segment_2.empty:
    print(segment_2[['Churn_Probability', 'tenure', 'MonthlyCharges', 'TotalServiceScore']].head())
    print("Recommended Strategy for Segment 2: Loyalty programs, personalized discounts, offer premium features at no extra cost, emphasize value of continued service.")

# Segment 3: No Online Security/Tech Support, At-Risk
segment3_condition = (df_at_risk['OnlineSecurity_Yes'] == 0) & \
                     (df_at_risk['TechSupport_Yes'] == 0) & \
                     (df_at_risk['Churn_Probability'] > 0.5)
segment_3 = df_at_risk[segment3_condition]
print(f"\nSegment 3: Customers Lacking Security/Support, At-Risk ({len(segment_3)} customers)")
if not segment_3.empty:
    print(segment_3[['Churn_Probability', 'OnlineSecurity_Yes', 'TechSupport_Yes', 'MonthlyCharges']].head())
    print("Recommended Strategy for Segment 3: Offer free trials of security/tech support, highlight benefits of these services, provide educational material on online safety.")

# 3. General Retention Strategies based on overall insights

print("\n--- General Churn Retention Strategies ---")
print("Based on overall insights (e.g., from feature importances and correlation analysis):")
print("1. **Contract Management:** Actively engage month-to-month customers before their contracts expire. Offer attractive discounts or benefits for switching to longer-term contracts (1-year or 2-year).")
print("2. **Service Quality for Fiber Optic:** Invest in improving Fiber Optic internet service reliability and customer support responsiveness, as this segment has high churn.")
print("3. **Value-Added Services Promotion:** Proactively offer and educate customers about value-added services like Online Security and Tech Support, especially to new customers or those without these services, as they tend to reduce churn.")
print("4. **Billing & Charges Transparency:** Ensure clear and transparent billing. Address any spikes in monthly charges promptly.")
print("5. **Senior Citizen Support:** Provide tailored support or plans for senior citizens, as they show a higher propensity to churn.")
print("6. **Proactive Problem Solving:** Implement systems to identify service issues or customer dissatisfaction early and intervene before customers decide to churn.")
print("7. **Feedback Loops:** Regularly collect customer feedback to understand pain points and areas for improvement.")

print("\nRetention strategies generated based on model predictions and insights.")